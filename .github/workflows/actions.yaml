name: "Terraform action"
on:
  push:
    branches:
      - main
  pull_request:
permissions:
  id-token: write # This is required for aws oidc connection
  contents: read # This is required for actions/checkout
  pull-requests: write # This is required for gh bot to comment PR
env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
  PYTHON_VERSION: 3.7
  TF_VERSION: 1.2.5
  DEPLOY_PROJECT: 'AWS-New-Relic-integration'
  TERRAFORM_ROOT_DIR: 'terraform/environments'
  TF_BUCKET_BASE_NAME: 'aws-new-relic-integration-terraform-backend'
  TF_DYNAMO_BASE_NAME: 'aws-new-relic-integration-tf-state-lock'
  KEY_NAME: 'AWS-New-Relic-integration.tfstate'
jobs:
  run-params:
    name: Prepare the Terraform Parameters and Actions
    runs-on: ubuntu-latest
    steps:
      - id: repo-name
        name: Repository Name without organization
        run: |
          repo=${GITHUB_REPOSITORY/adastra-analytics-framework\//}
          echo "::set-output name=out::$repo"

      - id: tf-feature-workspace
        name: Terraform Workspace name based on branch
        run: |
          workspace=$GITHUB_HEAD_REF
          workspace=${workspace/feature\//}
          workspace=${workspace/hotfix\//}
          workspace=${workspace/_/-}
          echo "::set-output name=out::$workspace"

      - id: checkout-repo
        name: Checkout This Repo
        uses: actions/checkout@v2

    outputs:
      repo-name: ${{ steps.repo-name.outputs.out }}
      tf-feature-workspace: ${{ steps.tf-feature-workspace.outputs.out }}
  deploy:
    runs-on: ubuntu-latest
    needs: [run-params]
    strategy:
      fail-fast: false
      matrix:
        stage:
          - name: 'dev'
            workspace: ${{needs.run-params.outputs.tf-feature-workspace}}
            extra: ${{needs.run-params.outputs.repo-name}}
        tf-environment: ['AWS-New-Relic-integration']
    defaults:
      run:
        shell: bash
        working-directory: .
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{env.PYTHON_VERSION}}
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials from AWS account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }} #role-arn
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHub-OIDC-TERRAFORM
      - name: Echo secret-name
        run: echo github-actions-${{ env.DEPLOY_PROJECT }}-${{ matrix.tf-environment }}-${{ matrix.stage.name }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{env.TF_VERSION}}

      - name: Create .tfvars
        uses: ./.github/create-tfvars-from-secretsmanager
        with:
          secret-name: github-actions-${{ env.DEPLOY_PROJECT }}-${{ matrix.tf-environment }}-${{ matrix.stage.name }}
          tf-vars-file-path: ${{ github.workspace }}/${{ env.TERRAFORM_ROOT_DIR }}/${{ matrix.tf-environment }}/${{ matrix.tf-environment }}.tfvars

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
          AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
        run: terraform init -backend-config="region=${{ env.AWS_REGION }}" -backend-config="bucket=${{ env.TF_BUCKET_BASE_NAME }}" -backend-config="dynamodb_table=${{ env.TF_DYNAMO_BASE_NAME }}"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -var-file=${{ github.workspace }}/${{ env.TERRAFORM_ROOT_DIR }}/${{ matrix.tf-environment }}/${{ matrix.tf-environment }}.tfvars -out=${{ env.GITHUB_RUNNER_BASE_DIR }}/${{ matrix.tf-environment }}/${{ matrix.tf-environment }}/${{ env.TERRAFORM_ROOT_DIR }}/${{ matrix.tf-environment }}/plan.out
        if: github.event_name == 'pull_request'
          #uses: dflook/terraform-plan@v1
          #with:
          #path: ./
          #label: ${{ needs.run-params.outputs.tf-feature-workspace }}
          #workspace: ${{ matrix.stage.workspace }}
          #var_file: ${{ github.workspace }}/${{ env.TERRAFORM_ROOT_DIR }}/${{ matrix.tf-environment }}/${{ matrix.tf-environment }}.tfvars
        #json_plan_path: plan-out
        continue-on-error: true
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
            </details>
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Save Terraform Plan as Artifact
        uses: actions/upload-artifact@v2
        if: ${{ matrix.stage.workspace != 'default' }}
        with:
          name: ${{ matrix.stage.name }}-${{ matrix.tf-environment }}-${{ matrix.stage.workspace }}
          path: ${{ env.TERRAFORM_ROOT_DIR }}/${{ matrix.tf-environment }}/plan.out

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false